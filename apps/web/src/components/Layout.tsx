import { Link, Navbar, NavbarBrand, Tab, Tabs } from "@nextui-org/react";
import Head from "next/head";
import NextLink from "next/link";
import { useRouter } from "next/router";
import React, { type PropsWithChildren } from "react";

export const EmptyLayout = ({ children }: PropsWithChildren) => {
  const router = useRouter();

  const generateBreadcrumb = (): string[] => {
    const path = router.asPath.split("/").slice(1);

    const breadcrumb = path.map((_, index) => {
      const newPath = [...path];
      newPath.splice(index + 1, path.length - index);

      const href = newPath.join("/");

      return href;
    });

    return breadcrumb;
  };

  console.log(generateBreadcrumb());

  return (
    <>
      <Head>
        <title>NotRailway</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen">
        <Navbar maxWidth="full">
          <NavbarBrand>
            <p className="font-bold text-inherit">NotRailway</p>
            <div className="ml-4 flex gap-2">
              {generateBreadcrumb().map((href, index) => (
                <>
                  <Link
                    color="primary"
                    as={NextLink}
                    href={`/${href}`}
                    className="hover:underline"
                    key={href}
                  >
                    {href.split("/").pop()}
                  </Link>
                  <p>
                    {" "}
                    {index !== generateBreadcrumb().length - 1 ? "/" : null}
                  </p>
                </>
              ))}
            </div>
          </NavbarBrand>
        </Navbar>
        {children}
      </div>
    </>
  );
};

export const Layout = ({ children }: PropsWithChildren) => {
  const router = useRouter();

  const pathname = router.pathname;

  return (
    <EmptyLayout>
      <Tabs
        selectedKey={pathname}
        onSelectionChange={async (key) => {
          await router.push(key.toString());
        }}
        variant="underlined"
        className="h-full"
        classNames={{
          tabList: "rounded-none w-screen border-b-1 border-b-zinc-800",
          cursor: "bottom-[-4px]",
        }}
      >
        <Tab
          key="/projects"
          title="Projects"
          className="flex h-full w-auto flex-col items-center justify-center"
        />
      </Tabs>
      {children}
    </EmptyLayout>
  );
};
